/**
 * Copyright 2022 University of Adelaide
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// curve 25515 square
export const width = 5;
export const numArgsIn = 1;
export const numArgsOut = 1;
export const bounds = Array(width).fill("0x18000000000000");

export const functionA = [
  "sub rsp, 0x38 ",
  "mov [ rsp + 0x0 ], rbx; saving to stack",
  "mov [ rsp + 0x8 ], rbp; saving to stack",
  "mov [ rsp + 0x10 ], r12; saving to stack",
  "mov [ rsp + 0x18 ], r13; saving to stack",
  "mov [ rsp + 0x20 ], r14; saving to stack",
  "mov [ rsp + 0x28 ], r15; saving to stack",
  "mov rdx, [ rsi + 0x0 ]; arg1[0] to rdx",
  "mulx r12, r10, [ rsi + 0x0 ]; x38, x37<- arg1[0] * arg1[0]",
  "imul r8, [ rsi + 0x20 ], 0x13; x1 <- arg1[4] * 0x13",
  "imul r14, r8, 0x2; x2 <- x1 * 0x2",
  "mov rdx, r14; x2 to rdx",
  "mulx rbx, r14, [ rsi + 0x8 ]; x22, x21<- arg1[1] * x2",
  "imul r11, [ rsi + 0x18 ], 0x13; x4 <- arg1[3] * 0x13",
  "imul rax, r11, 0x2; x5 <- x4 * 0x2",
  "xchg rdx, rax; x5, swapping with x2, which is currently in rdx",
  "mulx rdx, r9, [ rsi + 0x10 ]; x18, x17<- arg1[2] * x5",
  "xor r13, r13",
  "adox r14, r9",
  "adcx r10, r14",
  "adox rbx, rdx",
  "adcx r12, rbx",
  "mov rcx, r10; x47, copying x43 here, cause x43 is needed in a reg for other than x47, namely all: , x47, x48, size: 2",
  "shrd rcx, r12, 51; x47 <- x45||x43 >> 51",
  "imul rbp, [ rsi + 0x8 ], 0x2; x8 <- arg1[1] * 0x2",
  "mov rdx, rbp; x8 to rdx",
  "mulx rdx, rbp, [ rsi + 0x0 ]; x36, x35<- arg1[0] * x8",
  "mov r15, rdx; preserving value of x36 into a new reg",
  "mov rdx, [ rsi + 0x10 ]; saving arg1[2] in rdx.",
  "mulx r9, r14, rax; x16, x15<- arg1[2] * x2",
  "mov rdx, [ rsi + 0x18 ]; arg1[3] to rdx",
  "mulx r11, rbx, r11; x14, x13<- arg1[3] * x4",
  "add r14, rbx; could be done better, if r0 has been u8 as well",
  "dec r13; OF<-0x0, preserve CF 3",
  "adox rbp, r14",
  "setc r12b; spill CF x74 to reg (r12)",
  "clc;",
  "adcx rcx, rbp",
  "movzx r12, r12b",
  "lea r9, [ r9 + r11 ]",
  "lea r9, [ r9 + r12 ]",
  "adox r15, r9",
  "adc r15, 0x0",
  "mov r11, rcx; x84, copying x81 here, cause x81 is needed in a reg for other than x84, namely all: , x84, x85, size: 2",
  "shrd r11, r15, 51; x84 <- x83||x81 >> 51",
  "imul rbx, [ rsi + 0x10 ], 0x2; x7 <- arg1[2] * 0x2",
  "mov rdx, rbx; x7 to rdx",
  "mulx rbx, r14, [ rsi + 0x0 ]; x34, x33<- arg1[0] * x7",
  "mov r12, rdx; preserving value of x7 into a new reg",
  "mov rdx, [ rsi + 0x8 ]; saving arg1[1] in rdx.",
  "mulx rbp, r9, [ rsi + 0x8 ]; x28, x27<- arg1[1] * arg1[1]",
  "mov rdx, [ rsi + 0x18 ]; arg1[3] to rdx",
  "mulx rax, r15, rax; x12, x11<- arg1[3] * x2",
  "add r9, r15; could be done better, if r0 has been u8 as well",
  "inc r13; OF<-0x0, preserve CF 2",
  "adox r14, r9",
  "seto r15b; spill OF x70 to reg (r15)",
  "dec r13; OF<-0x0, preserve CF 3",
  "adox r11, r14",
  "adcx rbp, rax",
  "movzx r15, r15b",
  "lea rbx, [ rbx + rbp ]",
  "lea rbx, [ rbx + r15 ]",
  "mov rax, 0x0 ; moving imm to reg",
  "adox rbx, rax",
  "mov r9, r11; x89, copying x86 here, cause x86 is needed in a reg for other than x89, namely all: , x89, x90, size: 2",
  "shrd r9, rbx, 51; x89 <- x88||x86 >> 51",
  "mov r14, 0x7ffffffffffff ; moving imm to reg",
  "and r10, r14; x48 <- x43& 0x7ffffffffffff",
  "imul r15, [ rsi + 0x18 ], 0x2; x6 <- arg1[3] * 0x2",
  "mov rdx, [ rsi + 0x0 ]; arg1[0] to rdx",
  "mulx rbp, rbx, r15; x32, x31<- arg1[0] * x6",
  "mov rdx, r12; x7 to rdx",
  "mulx rdx, r12, [ rsi + 0x8 ]; x26, x25<- arg1[1] * x7",
  "mov rax, rdx; preserving value of x26 into a new reg",
  "mov rdx, [ rsi + 0x20 ]; saving arg1[4] in rdx.",
  "mulx r8, r14, r8; x10, x9<- arg1[4] * x1",
  "add r12, r14; could be done better, if r0 has been u8 as well",
  "inc r13; OF<-0x0, preserve CF 2",
  "adox rbx, r12",
  "setc r14b; spill CF x58 to reg (r14)",
  "clc;",
  "adcx r9, rbx",
  "movzx r14, r14b",
  "lea rax, [ rax + r8 ]",
  "lea rax, [ rax + r14 ]",
  "adox rbp, rax",
  "adc rbp, 0x0",
  "mov r8, r9; x94, copying x91 here, cause x91 is needed in a reg for other than x94, namely all: , x94, x95, size: 2",
  "shrd r8, rbp, 51; x94 <- x93||x91 >> 51",
  "imul r12, [ rsi + 0x20 ], 0x2; x3 <- arg1[4] * 0x2",
  "mov rdx, [ rsi + 0x0 ]; arg1[0] to rdx",
  "mulx r12, r14, r12; x30, x29<- arg1[0] * x3",
  "mov rdx, [ rsi + 0x8 ]; arg1[1] to rdx",
  "mulx r15, rbx, r15; x24, x23<- arg1[1] * x6",
  "mov rdx, [ rsi + 0x10 ]; arg1[2] to rdx",
  "mulx rax, rbp, [ rsi + 0x10 ]; x20, x19<- arg1[2] * arg1[2]",
  "add rbx, rbp; could be done better, if r0 has been u8 as well",
  "dec r13; OF<-0x0, preserve CF 3",
  "adox r14, rbx",
  "seto bpl; spill OF x54 to reg (rbp)",
  "inc r13; OF<-0x0, preserve CF 2",
  "adox r8, r14",
  "adcx r15, rax",
  "movzx rbp, bpl",
  "lea r12, [ r12 + r15 ]",
  "lea r12, [ r12 + rbp ]",
  "adox r12, r13",
  "mov rax, r8; x99, copying x96 here, cause x96 is needed in a reg for other than x99, namely all: , x100, x99, size: 2",
  "shrd rax, r12, 51; x99 <- x98||x96 >> 51",
  "imul rax, rax, 0x13; x101 <- x99 * 0x13",
  "lea r10, [ r10 + rax ]",
  "mov rbx, r10; x103, copying x102 here, cause x102 is needed in a reg for other than x103, namely all: , x103, x104, size: 2",
  "shr rbx, 51; x103 <- x102>> 51",
  "mov r14, 0x7ffffffffffff ; moving imm to reg",
  "and rcx, r14; x85 <- x81& 0x7ffffffffffff",
  "lea rbx, [ rbx + rcx ]",
  "mov rbp, rbx; x106, copying x105 here, cause x105 is needed in a reg for other than x106, namely all: , x106, x107, size: 2",
  "shr rbp, 51; x106 <- x105>> 51",
  "and r8, r14; x100 <- x96& 0x7ffffffffffff",
  "mov [ rdi + 0x20 ], r8; out1[4] = x100",
  "and r11, r14; x90 <- x86& 0x7ffffffffffff",
  "lea rbp, [ rbp + r11 ]",
  "and r10, r14; x104 <- x102& 0x7ffffffffffff",
  "and rbx, r14; x107 <- x105& 0x7ffffffffffff",
  "mov [ rdi + 0x8 ], rbx; out1[1] = x107",
  "mov [ rdi + 0x0 ], r10; out1[0] = x104",
  "and r9, r14; x95 <- x91& 0x7ffffffffffff",
  "mov [ rdi + 0x10 ], rbp; out1[2] = x108",
  "mov [ rdi + 0x18 ], r9; out1[3] = x95",
  "mov rbx, [ rsp + 0x0 ]; restoring from stack",
  "mov rbp, [ rsp + 0x8 ]; restoring from stack",
  "mov r12, [ rsp + 0x10 ]; restoring from stack",
  "mov r13, [ rsp + 0x18 ]; restoring from stack",
  "mov r14, [ rsp + 0x20 ]; restoring from stack",
  "mov r15, [ rsp + 0x28 ]; restoring from stack",
  "add rsp, 0x38 ",
  "ret",
].join("\n");
export const functionB = [
  "sub rsp, 0x38 ",
  "mov [ rsp + 0x0 ], rbx; saving to stack",
  "mov [ rsp + 0x8 ], rbp; saving to stack",
  "mov [ rsp + 0x10 ], r12; saving to stack",
  "mov [ rsp + 0x18 ], r13; saving to stack",
  "mov [ rsp + 0x20 ], r14; saving to stack",
  "mov [ rsp + 0x28 ], r15; saving to stack",
  "mov rdx, [ rsi + 0x0 ]; arg1[0] to rdx",
  "mulx r12, r8, [ rsi + 0x0 ]; x38, x37<- arg1[0] * arg1[0]",
  "imul r11, [ rsi + 0x20 ], 0x13; x1 <- arg1[4] * 0x13",
  "imul rbx, [ rsi + 0x18 ], 0x13; x4 <- arg1[3] * 0x13",
  "imul r14, r11, 0x2; x2 <- x1 * 0x2",
  "mov rdx, r14; x2 to rdx",
  "mulx rcx, r9, [ rsi + 0x8 ]; x22, x21<- arg1[1] * x2",
  "imul rax, rbx, 0x2; x5 <- x4 * 0x2",
  "mov r14, rdx; preserving value of x2 into a new reg",
  "mov rdx, [ rsi + 0x10 ]; saving arg1[2] in rdx.",
  "mulx rax, r13, rax; x18, x17<- arg1[2] * x5",
  "xor r10, r10",
  "adox r9, r13",
  "adcx r8, r9",
  "adox rcx, rax",
  "adcx r12, rcx",
  "mov rbp, r8; x47, copying x43 here, cause x43 is needed in a reg for other than x47, namely all: , x47, x48, size: 2",
  "shrd rbp, r12, 51; x47 <- x45||x43 >> 51",
  "imul r15, [ rsi + 0x8 ], 0x2; x8 <- arg1[1] * 0x2",
  "mov rdx, [ rsi + 0x0 ]; arg1[0] to rdx",
  "mulx r15, rax, r15; x36, x35<- arg1[0] * x8",
  "mov rdx, [ rsi + 0x10 ]; arg1[2] to rdx",
  "mulx r13, r9, r14; x16, x15<- arg1[2] * x2",
  "mov rdx, rbx; x4 to rdx",
  "mulx rdx, rbx, [ rsi + 0x18 ]; x14, x13<- arg1[3] * x4",
  "add r9, rbx; could be done better, if r0 has been u8 as well",
  "adcx r13, rdx",
  "xor rcx, rcx",
  "adox rax, r9",
  "adcx rbp, rax",
  "adox r15, r13",
  "adc r15, 0x0",
  "imul r10, [ rsi + 0x10 ], 0x2; x7 <- arg1[2] * 0x2",
  "mov r12, rbp; x84, copying x81 here, cause x81 is needed in a reg for other than x84, namely all: , x84, x85, size: 2",
  "shrd r12, r15, 51; x84 <- x83||x81 >> 51",
  "mov rdx, [ rsi + 0x8 ]; arg1[1] to rdx",
  "mulx rbx, r9, [ rsi + 0x8 ]; x28, x27<- arg1[1] * arg1[1]",
  "mov rdx, [ rsi + 0x0 ]; arg1[0] to rdx",
  "mulx r13, rax, r10; x34, x33<- arg1[0] * x7",
  "mov rdx, [ rsi + 0x18 ]; arg1[3] to rdx",
  "mulx r14, r15, r14; x12, x11<- arg1[3] * x2",
  "test al, al",
  "adox r9, r15",
  "adcx rax, r9",
  "adox rbx, r14",
  "adcx r13, rbx",
  "test al, al",
  "adox r12, rax",
  "adox r13, rcx",
  "mov r14, 0x7ffffffffffff ; moving imm to reg",
  "and r8, r14; x48 <- x43& 0x7ffffffffffff",
  "imul r15, [ rsi + 0x18 ], 0x2; x6 <- arg1[3] * 0x2",
  "mov r9, r12; x89, copying x86 here, cause x86 is needed in a reg for other than x89, namely all: , x89, x90, size: 2",
  "shrd r9, r13, 51; x89 <- x88||x86 >> 51",
  "mov rdx, [ rsi + 0x0 ]; arg1[0] to rdx",
  "mulx rax, rbx, r15; x32, x31<- arg1[0] * x6",
  "mov rdx, r11; x1 to rdx",
  "mulx rdx, r11, [ rsi + 0x20 ]; x10, x9<- arg1[4] * x1",
  "xchg rdx, r10; x7, swapping with x10, which is currently in rdx",
  "mulx rdx, r13, [ rsi + 0x8 ]; x26, x25<- arg1[1] * x7",
  "add r13, r11; could be done better, if r0 has been u8 as well",
  "dec rcx; OF<-0x0, preserve CF 3",
  "adox rbx, r13",
  "setc r11b; spill CF x58 to reg (r11)",
  "clc;",
  "adcx r9, rbx",
  "movzx r11, r11b",
  "lea rdx, [ rdx + r10 ]",
  "lea rdx, [ rdx + r11 ]",
  "adox rax, rdx",
  "adc rax, 0x0",
  "imul r10, [ rsi + 0x20 ], 0x2; x3 <- arg1[4] * 0x2",
  "mov r13, r9; x94, copying x91 here, cause x91 is needed in a reg for other than x94, namely all: , x94, x95, size: 2",
  "shrd r13, rax, 51; x94 <- x93||x91 >> 51",
  "mov rdx, [ rsi + 0x0 ]; arg1[0] to rdx",
  "mulx r10, r11, r10; x30, x29<- arg1[0] * x3",
  "mov rdx, [ rsi + 0x8 ]; arg1[1] to rdx",
  "mulx r15, rbx, r15; x24, x23<- arg1[1] * x6",
  "mov rdx, [ rsi + 0x10 ]; arg1[2] to rdx",
  "mulx rax, rcx, [ rsi + 0x10 ]; x20, x19<- arg1[2] * arg1[2]",
  "xor r14, r14",
  "adox rbx, rcx",
  "adcx r11, rbx",
  "seto cl; spill OF x50 to reg (rcx)",
  "dec r14; OF<-0x0, preserve CF 3",
  "adox r13, r11",
  "movzx rcx, cl",
  "lea r15, [ r15 + rax ]",
  "lea r15, [ r15 + rcx ]",
  "adcx r10, r15",
  "mov rax, 0x0 ; moving imm to reg",
  "adox r10, rax",
  "mov rbx, r13; x99, copying x96 here, cause x96 is needed in a reg for other than x99, namely all: , x100, x99, size: 2",
  "shrd rbx, r10, 51; x99 <- x98||x96 >> 51",
  "imul rbx, rbx, 0x13; x101 <- x99 * 0x13",
  "lea r8, [ r8 + rbx ]",
  "mov rcx, r8; x103, copying x102 here, cause x102 is needed in a reg for other than x103, namely all: , x103, x104, size: 2",
  "shr rcx, 51; x103 <- x102>> 51",
  "mov r11, 0x7ffffffffffff ; moving imm to reg",
  "and rbp, r11; x85 <- x81& 0x7ffffffffffff",
  "lea rcx, [ rcx + rbp ]",
  "and r13, r11; x100 <- x96& 0x7ffffffffffff",
  "and r12, r11; x90 <- x86& 0x7ffffffffffff",
  "mov r15, rcx; x106, copying x105 here, cause x105 is needed in a reg for other than x106, namely all: , x106, x107, size: 2",
  "shr r15, 51; x106 <- x105>> 51",
  "mov [ rdi + 0x20 ], r13; out1[4] = x100",
  "and r8, r11; x104 <- x102& 0x7ffffffffffff",
  "lea r15, [ r15 + r12 ]",
  "and rcx, r11; x107 <- x105& 0x7ffffffffffff",
  "mov [ rdi + 0x0 ], r8; out1[0] = x104",
  "mov [ rdi + 0x8 ], rcx; out1[1] = x107",
  "mov [ rdi + 0x10 ], r15; out1[2] = x108",
  "and r9, r11; x95 <- x91& 0x7ffffffffffff",
  "mov [ rdi + 0x18 ], r9; out1[3] = x95",
  "mov rbx, [ rsp + 0x0 ]; restoring from stack",
  "mov rbp, [ rsp + 0x8 ]; restoring from stack",
  "mov r12, [ rsp + 0x10 ]; restoring from stack",
  "mov r13, [ rsp + 0x18 ]; restoring from stack",
  "mov r14, [ rsp + 0x20 ]; restoring from stack",
  "mov r15, [ rsp + 0x28 ]; restoring from stack",
  "add rsp, 0x38 ",
  "ret",
].join("\n");
